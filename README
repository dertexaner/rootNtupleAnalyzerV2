
Introduction:
-------------

This package provides a small facility to analyze one or a chain of root ntuples.

A script (./scripts/make_rootNtupleClass.sh) is used to generate automatically
(using the root command RootNtupleMaker->MakeClass) a class (include/rootNtupleClass.h
and src/rootNtupleClass.C) with the variable definitions of a given root ntuple
(to be provided by the user).

The class baseClass (include/baseClass.h and src/baseClass.C) inherits from the
automatically generated rootNtupleClass.
baseClass provides the methods that are common to all analysis, such as the method
to read a list of root files and form a chain. It will, asap, also provide a method
to read a list of selection cuts.

The class analysisClass (include/analysisClass.h and src/analysisClass.C) inherits
from baseClass.
The user's code should be placed in the method Loop() of analysisClass, which reimplements
the method Loop() of rootNtupleClass.

The main program (src/main.C) receives the configuration parameters (such as the input
chain of root files and a file to provide a cut list) and executes the analysisClass code.

Instructions:
-------------

1) Environment setup:
     export SCRAM_ARCH=slc6_amd64_gcc493
     cmsrel CMSSW_7_6_3_patch2
     cd CMSSW_7_6_3_patch2/src
     cmsenv

2) Checkout the code:
     git clone git@github.com:dertexaner/rootNtupleAnalyzerV2 

3) Generate the rootNtupleClass:
     cd rootNtupleAnalyzerV2/
     ./scripts/make_rootNtupleClass.sh   #(you will be asked for input arguments)
   Example:				      
     ./scripts/make_rootNtupleClass.sh  -f /tmp/hsaka/SingleMuon__Run2015D-PromptReco-v3__RECO_91_1_Qq9.root -t hcalTupleTree/tree

4) Copy the analysis template file into your own file:
     cp -i src/analysisClass_template.C src/analysisClass_myCode.C
   and make a symbolic link analysisClass.C by:
     ln -s analysisClass_myCode.C src/analysisClass.C

5) Compile to test that all is OK so far (in order to compile, steps 2 and 3 need to be done first):
     make clean
     make

6) Add your analysis code to the method Loop() of analysisClass_myCode.C.
   To access variables, use variable->at(i) instead of variable[i]

7) Compile as in 4.

8) Run:
   ./main  #(you will be asked for input arguments)
   

Note1:
  One can have several analyses in a directory, such as
    src/analysisClass_myCode1.C
    src/analysisClass_myCode2.C
    src/analysisClass_myCode3.C
  and move the symbolic link to the one to be used:
    ln -sf analysisClass_myCode2.C src/analysisClass.C
  and compile/run as above.

Note2: 
  A simple, empty template is provided in src/analysisClass_NoiseTemplate.C
  


Examples:
---------

1) To run locally:

     ./main config/inputFile.txt config/cutFile_NoExternalCuts.txt hcalTupleTree/tree /tmp/<username>/<OutputFile> /tmp/<username>/<CutEfficiencyFile>

   where OutputFile is the name of the output root file without the ".root" extension
   and CutEfficiencyFile is the name of the output cut-efficiency file without the ".txt" extension.

   The inputFile.txt should have the following structure (a line per input file).
   For local files:
     file:/full/path/to/file.root
   And for files on eos:
     root://eoscms//eos/cms/store/path/to/file.root
  
2) To run on lxbatch:

   ...
 

# ------------------------------------------------------------------------------------------------------ #
